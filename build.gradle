buildscript {
    ext {
        springBootVersion = '1.2.2.RELEASE'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'org.springframework:springloaded:1.2.2.RELEASE'
    }
}

apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot' 

mainClassName = 'com.terrestris.map.Application'

jar {
    baseName = 'terrestris-map'
    version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
    }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.boot:spring-boot-starter-jdbc")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile("mysql:mysql-connector-java:5.1.34")
    compile("com.mysema.querydsl:querydsl-apt:3.6.2")
    compile("com.mysema.querydsl:querydsl-jpa:3.6.2")
    compile("org.springframework:spring-context-support")

    compile("javax.mail:mail:1.4.1")

    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("junit:junit")
    testCompile("org.subethamail:subethasmtp:3.1.7")
}

sourceSets {
    generated {
        java {
            srcDirs = ['src/main/generated-sources']
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

task generateMetaModel(type: JavaCompile, group: 'build', description: 'Generates the metamodel') {
    source = sourceSets.main.java
    classpath = configurations.compile
    options.compilerArgs = [
            "-proc:only",
            "-processor", "com.mysema.query.apt.jpa.JPAAnnotationProcessor"
    ]
    // specify output of generated code
    destinationDir = sourceSets.generated.java.srcDirs.iterator().next()
}

compileJava {
    dependsOn generateMetaModel
    source generateMetaModel.destinationDir
}

compileGeneratedJava {
    dependsOn generateMetaModel
    options.warnings = false
    classpath += sourceSets.main.runtimeClasspath
}

clean {
    delete sourceSets.generated.java.srcDirs
}